name: "Setup Rust with Caching"
description: "Sets up Rust toolchain with optimized caching"
inputs:
  toolchain:
    description: "Rust toolchain to install"
    required: false
    default: "stable"
  components:
    description: "Additional components to install (comma-separated)"
    required: false
    default: ""
  targets:
    description: "Additional targets to install (comma-separated)"
    required: false
    default: ""
  cache-key-suffix:
    description: "Additional suffix for cache key"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ inputs.toolchain }}
        components: ${{ inputs.components }}
        targets: ${{ inputs.targets }}

    - name: Generate cache key
      id: cache-key
      shell: bash
      run: |
        # Create cache key based on OS, toolchain, and Cargo.lock
        RUST_VERSION=$(rustc --version | cut -d' ' -f2)
        
        if [ -f Cargo.lock ]; then
          if command -v sha256sum >/dev/null 2>&1; then
            CARGO_LOCK_HASH=$(sha256sum Cargo.lock | cut -d' ' -f1 | head -c 8)
          elif command -v shasum >/dev/null 2>&1; then
            CARGO_LOCK_HASH=$(shasum -a 256 Cargo.lock | cut -d' ' -f1 | head -c 8)
          else
            CARGO_LOCK_HASH="no-hash"
          fi
        else
          CARGO_LOCK_HASH="no-lock"
        fi
        
        OS_ARCH="${{ runner.os }}-${{ runner.arch }}"
        TOOLCHAIN="${{ inputs.toolchain }}"
        SUFFIX="${{ inputs.cache-key-suffix }}"
        
        PRIMARY_KEY="${OS_ARCH}-rust-${TOOLCHAIN}-${RUST_VERSION}-${CARGO_LOCK_HASH}"
        if [ -n "$SUFFIX" ]; then
          PRIMARY_KEY="${PRIMARY_KEY}-${SUFFIX}"
        fi
        
        FALLBACK_KEY="${OS_ARCH}-rust-${TOOLCHAIN}"
        
        echo "primary-key=${PRIMARY_KEY}" >> $GITHUB_OUTPUT
        echo "fallback-key=${FALLBACK_KEY}" >> $GITHUB_OUTPUT
        
        echo "Cache key: ${PRIMARY_KEY}"

    - name: Cache Cargo registry and git dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: cargo-deps-${{ steps.cache-key.outputs.primary-key }}
        restore-keys: |
          cargo-deps-${{ steps.cache-key.outputs.fallback-key }}

    - name: Cache Cargo build artifacts
      uses: actions/cache@v4
      with:
        path: target/
        key: cargo-build-${{ steps.cache-key.outputs.primary-key }}
        restore-keys: |
          cargo-build-${{ steps.cache-key.outputs.fallback-key }}

    - name: Configure Cargo
      shell: bash
      run: |
        # Create Cargo config for better performance
        mkdir -p ~/.cargo
        
        cat > ~/.cargo/config.toml << 'EOF'
[build]
incremental = true

[registries.crates-io]
protocol = "sparse"
EOF
        
        echo "Cargo configuration updated"

    - name: Warm up cache
      shell: bash
      run: |
        echo "Warming up Cargo cache..."
        
        # Fetch dependencies without building
        cargo fetch --verbose || echo "Fetch failed, continuing..."
        
        # Generate Cargo.lock if it doesn't exist
        if [ ! -f Cargo.lock ]; then
          cargo generate-lockfile || echo "Generate lockfile failed, continuing..."
        fi
        
        echo "Cache warm-up completed"