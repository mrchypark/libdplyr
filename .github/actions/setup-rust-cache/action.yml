name: "Setup Rust with Optimized Caching"
description: "Sets up Rust toolchain with optimized caching strategy"
inputs:
  toolchain:
    description: "Rust toolchain to install"
    required: false
    default: "stable"
  components:
    description: "Additional components to install (comma-separated)"
    required: false
    default: ""
  targets:
    description: "Additional targets to install (comma-separated)"
    required: false
    default: ""
  cache-key-suffix:
    description: "Additional suffix for cache key"
    required: false
    default: ""
  save-cache:
    description: "Whether to save cache (set to false for PR builds from forks)"
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ inputs.toolchain }}
        components: ${{ inputs.components }}
        targets: ${{ inputs.targets }}

    - name: Generate cache key (Unix)
      if: runner.os != 'Windows'
      id: cache-key
      shell: bash
      run: |
        # Create a comprehensive cache key based on multiple factors
        RUST_VERSION=$(rustc --version | cut -d' ' -f2)

        # Use cross-platform hash command
        if command -v sha256sum >/dev/null 2>&1; then
          CARGO_LOCK_HASH=$(sha256sum Cargo.lock | cut -d' ' -f1 | head -c 8)
        elif command -v shasum >/dev/null 2>&1; then
          CARGO_LOCK_HASH=$(shasum -a 256 Cargo.lock | cut -d' ' -f1 | head -c 8)
        else
          # Fallback to file modification time if no hash command available
          CARGO_LOCK_HASH=$(stat -c %Y Cargo.lock 2>/dev/null || stat -f %m Cargo.lock 2>/dev/null || echo "fallback")
        fi

        OS_ARCH="${{ runner.os }}-${{ runner.arch }}"
        TOOLCHAIN="${{ inputs.toolchain }}"
        COMPONENTS="${{ inputs.components }}"
        TARGETS="${{ inputs.targets }}"
        SUFFIX="${{ inputs.cache-key-suffix }}"

        # Create hierarchical cache keys for better hit rates
        PRIMARY_KEY="${OS_ARCH}-rust-${TOOLCHAIN}-${RUST_VERSION}-${CARGO_LOCK_HASH}"
        if [ -n "$COMPONENTS" ]; then
          PRIMARY_KEY="${PRIMARY_KEY}-comp-$(echo $COMPONENTS | tr ',' '-')"
        fi
        if [ -n "$TARGETS" ]; then
          PRIMARY_KEY="${PRIMARY_KEY}-tgt-$(echo $TARGETS | tr ',' '-')"
        fi
        if [ -n "$SUFFIX" ]; then
          PRIMARY_KEY="${PRIMARY_KEY}-${SUFFIX}"
        fi

        # Fallback keys for partial cache hits
        FALLBACK_KEY1="${OS_ARCH}-rust-${TOOLCHAIN}-${RUST_VERSION}"
        FALLBACK_KEY2="${OS_ARCH}-rust-${TOOLCHAIN}"
        FALLBACK_KEY3="${OS_ARCH}-rust"

        echo "primary-key=${PRIMARY_KEY}" >> $GITHUB_OUTPUT
        echo "fallback-key1=${FALLBACK_KEY1}" >> $GITHUB_OUTPUT
        echo "fallback-key2=${FALLBACK_KEY2}" >> $GITHUB_OUTPUT
        echo "fallback-key3=${FALLBACK_KEY3}" >> $GITHUB_OUTPUT

        echo "Cache key: ${PRIMARY_KEY}"
        echo "Fallback keys: ${FALLBACK_KEY1}, ${FALLBACK_KEY2}, ${FALLBACK_KEY3}"

    - name: Generate cache key (Windows)
      if: runner.os == 'Windows'
      id: cache-key
      shell: powershell
      run: |
        # Create a comprehensive cache key based on multiple factors
        $rustVersion = (rustc --version).Split(' ')[1]

        # Generate hash for Cargo.lock
        if (Test-Path "Cargo.lock") {
          $cargoLockHash = (Get-FileHash "Cargo.lock" -Algorithm SHA256).Hash.Substring(0, 8)
        } else {
          $cargoLockHash = "fallback"
        }

        $osArch = "${{ runner.os }}-${{ runner.arch }}"
        $toolchain = "${{ inputs.toolchain }}"
        $components = "${{ inputs.components }}"
        $targets = "${{ inputs.targets }}"
        $suffix = "${{ inputs.cache-key-suffix }}"

        # Create hierarchical cache keys for better hit rates
        $primaryKey = "${osArch}-rust-${toolchain}-${rustVersion}-${cargoLockHash}"
        if ($components) {
          $primaryKey += "-comp-$($components -replace ',', '-')"
        }
        if ($targets) {
          $primaryKey += "-tgt-$($targets -replace ',', '-')"
        }
        if ($suffix) {
          $primaryKey += "-${suffix}"
        }

        # Fallback keys for partial cache hits
        $fallbackKey1 = "${osArch}-rust-${toolchain}-${rustVersion}"
        $fallbackKey2 = "${osArch}-rust-${toolchain}"
        $fallbackKey3 = "${osArch}-rust"

        "primary-key=${primaryKey}" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
        "fallback-key1=${fallbackKey1}" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
        "fallback-key2=${fallbackKey2}" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
        "fallback-key3=${fallbackKey3}" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

        Write-Host "Cache key: ${primaryKey}"
        Write-Host "Fallback keys: ${fallbackKey1}, ${fallbackKey2}, ${fallbackKey3}"

    - name: Cache Cargo registry and git dependencies (Unix)
      if: runner.os != 'Windows'
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: cargo-deps-${{ steps.cache-key.outputs.primary-key }}
        restore-keys: |
          cargo-deps-${{ steps.cache-key.outputs.fallback-key1 }}
          cargo-deps-${{ steps.cache-key.outputs.fallback-key2 }}
          cargo-deps-${{ steps.cache-key.outputs.fallback-key3 }}
        save-always: ${{ inputs.save-cache == 'true' }}

    - name: Cache Cargo registry and git dependencies (Windows)
      if: runner.os == 'Windows'
      uses: actions/cache@v4
      with:
        path: |
          ~\.cargo\registry\index\
          ~\.cargo\registry\cache\
          ~\.cargo\git\db\
        key: cargo-deps-${{ steps.cache-key.outputs.primary-key }}
        restore-keys: |
          cargo-deps-${{ steps.cache-key.outputs.fallback-key1 }}
          cargo-deps-${{ steps.cache-key.outputs.fallback-key2 }}
          cargo-deps-${{ steps.cache-key.outputs.fallback-key3 }}
        save-always: ${{ inputs.save-cache == 'true' }}

    - name: Cache Cargo build artifacts
      uses: actions/cache@v4
      with:
        path: |
          target/
        key: cargo-build-${{ steps.cache-key.outputs.primary-key }}
        restore-keys: |
          cargo-build-${{ steps.cache-key.outputs.fallback-key1 }}
          cargo-build-${{ steps.cache-key.outputs.fallback-key2 }}
          cargo-build-${{ steps.cache-key.outputs.fallback-key3 }}
        save-always: ${{ inputs.save-cache == 'true' }}

    - name: Cache Rust toolchain (Unix)
      if: runner.os != 'Windows'
      uses: actions/cache@v4
      with:
        path: |
          ~/.rustup/toolchains/
          ~/.rustup/update-hashes/
          ~/.rustup/settings.toml
        key: rustup-${{ runner.os }}-${{ inputs.toolchain }}-${{ hashFiles('rust-toolchain.toml', 'rust-toolchain') }}
        restore-keys: |
          rustup-${{ runner.os }}-${{ inputs.toolchain }}
          rustup-${{ runner.os }}

    - name: Cache Rust toolchain (Windows)
      if: runner.os == 'Windows'
      uses: actions/cache@v4
      with:
        path: |
          ~\.rustup\toolchains\
          ~\.rustup\update-hashes\
          ~\.rustup\settings.toml
        key: rustup-${{ runner.os }}-${{ inputs.toolchain }}-${{ hashFiles('rust-toolchain.toml', 'rust-toolchain') }}
        restore-keys: |
          rustup-${{ runner.os }}-${{ inputs.toolchain }}
          rustup-${{ runner.os }}

    - name: Configure Cargo for optimal caching (Unix)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        # Configure Cargo for better caching
        mkdir -p ~/.cargo

        # Create Cargo config
        cat > ~/.cargo/config.toml << 'EOF'
        [build]
        incremental = true

        [cargo-new]
        edition = "2021"

        [profile.dev]
        debug = 1
        incremental = true

        [profile.test]
        debug = 1
        incremental = true

        [registries.crates-io]
        protocol = "sparse"
        EOF

        echo "Cargo configuration updated for optimal caching"

    - name: Configure Cargo for optimal caching (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        # Configure Cargo for better caching
        $cargoDir = "$env:USERPROFILE\.cargo"
        New-Item -ItemType Directory -Force -Path $cargoDir | Out-Null

        # Create Cargo config
        $configContent = @"
[build]
incremental = true

[cargo-new]
edition = "2021"

[profile.dev]
debug = 1
incremental = true

[profile.test]
debug = 1
incremental = true

[registries.crates-io]
protocol = "sparse"
"@

        $configContent | Out-File -FilePath "$cargoDir\config.toml" -Encoding UTF8
        Write-Host "Cargo configuration updated for optimal caching"

    - name: Warm up cargo cache (Unix)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        # Pre-fetch dependencies to warm up the cache
        echo "Warming up Cargo cache..."

        # Fetch dependencies without building
        cargo fetch --verbose

        # Generate Cargo.lock if it doesn't exist
        if [ ! -f Cargo.lock ]; then
          cargo generate-lockfile
        fi

        echo "Cache warm-up completed"

    - name: Warm up cargo cache (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        # Pre-fetch dependencies to warm up the cache
        Write-Host "Warming up Cargo cache..."

        # Fetch dependencies without building
        cargo fetch --verbose

        # Generate Cargo.lock if it doesn't exist
        if (-not (Test-Path "Cargo.lock")) {
          cargo generate-lockfile
        }

        Write-Host "Cache warm-up completed"

    - name: Display cache statistics (Unix)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        echo "=== Cache Statistics ==="

        # Display cache sizes
        if [ -d ~/.cargo ]; then
          echo "Cargo cache size:"
          du -sh ~/.cargo 2>/dev/null || echo "Unable to calculate Cargo cache size"
        fi

        if [ -d target ]; then
          echo "Target directory size:"
          du -sh target 2>/dev/null || echo "Unable to calculate target directory size"
        fi

        # Display cache hit information
        echo "Cache key used: ${{ steps.cache-key.outputs.primary-key }}"

        # Show number of cached crates
        if [ -d ~/.cargo/registry/cache ]; then
          CACHED_CRATES=$(find ~/.cargo/registry/cache -name "*.crate" | wc -l)
          echo "Cached crates: $CACHED_CRATES"
        fi

        echo "======================="

    - name: Display cache statistics (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        Write-Host "=== Cache Statistics ==="

        # Display cache sizes
        $cargoPath = "$env:USERPROFILE\.cargo"
        if (Test-Path $cargoPath) {
          Write-Host "Cargo cache size:"
          try {
            $size = (Get-ChildItem $cargoPath -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum
            $sizeInMB = [math]::Round($size / 1MB, 2)
            Write-Host "${sizeInMB} MB"
          } catch {
            Write-Host "Unable to calculate Cargo cache size"
          }
        }

        if (Test-Path "target") {
          Write-Host "Target directory size:"
          try {
            $size = (Get-ChildItem "target" -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum
            $sizeInMB = [math]::Round($size / 1MB, 2)
            Write-Host "${sizeInMB} MB"
          } catch {
            Write-Host "Unable to calculate target directory size"
          }
        }

        # Display cache hit information
        Write-Host "Cache key used: ${{ steps.cache-key.outputs.primary-key }}"

        # Show number of cached crates
        $crateCachePath = "$env:USERPROFILE\.cargo\registry\cache"
        if (Test-Path $crateCachePath) {
          try {
            $crateCount = (Get-ChildItem $crateCachePath -Filter "*.crate" -Recurse -ErrorAction SilentlyContinue).Count
            Write-Host "Cached crates: $crateCount"
          } catch {
            Write-Host "Unable to count cached crates"
          }
        }

        Write-Host "======================="
