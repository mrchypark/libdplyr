name: CI Optimized

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Performance optimization flags
  CARGO_INCREMENTAL: 1
  CARGO_NET_RETRY: 10
  RUST_LOG: info
  # Reduce compilation time
  CARGO_PROFILE_DEV_DEBUG: 1
  CARGO_PROFILE_TEST_DEBUG: 1

jobs:
  # Quick validation job that runs first
  quick-check:
    name: Quick Validation
    runs-on: ubuntu-latest
    outputs:
      should_run_full_ci: ${{ steps.changes.outputs.should_run_full_ci }}
      rust_changed: ${{ steps.changes.outputs.rust_changed }}
      docs_changed: ${{ steps.changes.outputs.docs_changed }}
      ci_changed: ${{ steps.changes.outputs.ci_changed }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        run: |
          # Detect what types of files have changed
          if [ "${{ github.event_name }}" = "push" ]; then
            # For push events, compare with previous commit
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          else
            # For PR events, compare with base branch
            git fetch origin ${{ github.base_ref }}
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Check for Rust code changes
          RUST_CHANGED="false"
          if echo "$CHANGED_FILES" | grep -E '\.(rs|toml)$' > /dev/null; then
            RUST_CHANGED="true"
          fi
          
          # Check for documentation changes
          DOCS_CHANGED="false"
          if echo "$CHANGED_FILES" | grep -E '\.(md|rst|txt)$' > /dev/null; then
            DOCS_CHANGED="true"
          fi
          
          # Check for CI changes
          CI_CHANGED="false"
          if echo "$CHANGED_FILES" | grep -E '\.github/' > /dev/null; then
            CI_CHANGED="true"
          fi
          
          # Determine if we should run full CI
          SHOULD_RUN_FULL_CI="true"
          if [ "$RUST_CHANGED" = "false" ] && [ "$CI_CHANGED" = "false" ]; then
            SHOULD_RUN_FULL_CI="false"
          fi
          
          echo "rust_changed=$RUST_CHANGED" >> $GITHUB_OUTPUT
          echo "docs_changed=$DOCS_CHANGED" >> $GITHUB_OUTPUT
          echo "ci_changed=$CI_CHANGED" >> $GITHUB_OUTPUT
          echo "should_run_full_ci=$SHOULD_RUN_FULL_CI" >> $GITHUB_OUTPUT
          
          echo "::notice::Rust changed: $RUST_CHANGED, Docs changed: $DOCS_CHANGED, CI changed: $CI_CHANGED"
          echo "::notice::Should run full CI: $SHOULD_RUN_FULL_CI"

      - name: Setup Rust (quick check only)
        if: needs.quick-check.outputs.should_run_full_ci == 'true'
        uses: ./.github/actions/setup-rust-cache
        with:
          toolchain: stable
          cache-key-suffix: quick-check

      - name: Quick syntax check
        if: needs.quick-check.outputs.should_run_full_ci == 'true'
        run: |
          # Fast syntax check without full compilation
          cargo check --workspace --all-targets
          echo "::notice::Quick syntax check passed"

  # Optimized test matrix - reduced combinations for faster execution
  test-optimized:
    name: Test Suite (Optimized)
    runs-on: ${{ matrix.os }}
    needs: quick-check
    if: needs.quick-check.outputs.should_run_full_ci == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          # Primary platforms with stable Rust
          - os: ubuntu-latest
            rust: stable
            features: "--all-features"
            primary: true
          - os: windows-latest
            rust: stable
            features: "--all-features"
            primary: true
          - os: macos-latest
            rust: stable
            features: "--all-features"
            primary: true
          # Secondary testing with different Rust versions (Ubuntu only for speed)
          - os: ubuntu-latest
            rust: beta
            features: "--all-features"
            primary: false
          - os: ubuntu-latest
            rust: nightly
            features: "--all-features"
            primary: false
            experimental: true
    continue-on-error: ${{ matrix.experimental == true }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Rust with optimized caching
        uses: ./.github/actions/setup-rust-cache
        with:
          toolchain: ${{ matrix.rust }}
          cache-key-suffix: test-${{ matrix.os }}-${{ matrix.rust }}

      - name: Build (optimized)
        run: |
          # Use parallel compilation
          export CARGO_BUILD_JOBS=$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 2)
          echo "Using $CARGO_BUILD_JOBS parallel jobs"
          
          cargo build ${{ matrix.features }} --verbose

      - name: Run tests (optimized)
        run: |
          # Run tests with optimized settings
          export CARGO_BUILD_JOBS=$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 2)
          
          # Run different test types in parallel where possible
          if [ "${{ matrix.primary }}" = "true" ]; then
            # Full test suite for primary platforms
            cargo test ${{ matrix.features }} --verbose -- --test-threads=$CARGO_BUILD_JOBS
          else
            # Reduced test suite for secondary platforms
            cargo test --lib ${{ matrix.features }} --verbose -- --test-threads=$CARGO_BUILD_JOBS
          fi

      - name: Upload test results (primary only)
        if: always() && matrix.primary == true
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.rust }}
          path: |
            target/debug/deps/
          retention-days: 1

  # Parallel quality checks
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    needs: quick-check
    if: needs.quick-check.outputs.should_run_full_ci == 'true'
    strategy:
      matrix:
        check: [fmt, clippy, docs]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Rust with optimized caching
        uses: ./.github/actions/setup-rust-cache
        with:
          toolchain: stable
          components: ${{ matrix.check == 'fmt' && 'rustfmt' || matrix.check == 'clippy' && 'clippy' || '' }}
          cache-key-suffix: ${{ matrix.check }}

      - name: Run format check
        if: matrix.check == 'fmt'
        run: cargo fmt --all -- --check

      - name: Run clippy
        if: matrix.check == 'clippy'
        run: |
          # Run clippy with parallel execution
          cargo clippy --workspace --all-targets --all-features -- -D warnings

      - name: Build documentation
        if: matrix.check == 'docs'
        run: |
          cargo doc --workspace --all-features --no-deps --document-private-items
        env:
          RUSTDOCFLAGS: "-D warnings"

      - name: Upload documentation
        if: matrix.check == 'docs'
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: target/doc/
          retention-days: 7

  # Conditional coverage (only on main/develop)
  coverage-conditional:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: quick-check
    if: needs.quick-check.outputs.should_run_full_ci == 'true' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Rust with optimized caching
        uses: ./.github/actions/setup-rust-cache
        with:
          toolchain: stable
          cache-key-suffix: coverage

      - name: Install cargo-tarpaulin (cached)
        run: |
          # Check if tarpaulin is already installed
          if ! command -v cargo-tarpaulin &> /dev/null; then
            cargo install cargo-tarpaulin
          fi

      - name: Generate code coverage (optimized)
        run: |
          # Run coverage with optimized settings
          cargo tarpaulin \
            --verbose \
            --all-features \
            --workspace \
            --timeout 300 \
            --out xml \
            --out html \
            --skip-clean \
            --target-dir target/tarpaulin
        continue-on-error: true

      - name: Upload to Codecov
        if: always()
        uses: codecov/codecov-action@v3
        with:
          file: ./cobertura.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            cobertura.xml
            tarpaulin-report.html
          retention-days: 30

  # Conditional benchmarks (only on main branch)
  benchmark-conditional:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: quick-check
    if: needs.quick-check.outputs.should_run_full_ci == 'true' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Rust with optimized caching
        uses: ./.github/actions/setup-rust-cache
        with:
          toolchain: stable
          cache-key-suffix: benchmark

      - name: Run benchmarks (optimized)
        run: |
          # Run benchmarks with reduced iterations for faster execution
          cargo bench --message-format=json > benchmark-results.json 2>&1 || true

      - name: Store benchmark results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-baseline
          path: benchmark-results.json
          retention-days: 30

  # Security audit (weekly or on security-related changes)
  security-conditional:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: quick-check
    if: needs.quick-check.outputs.should_run_full_ci == 'true' && (github.event_name == 'schedule' || contains(github.event.head_commit.message, 'security') || needs.quick-check.outputs.rust_changed == 'true')
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Rust with optimized caching
        uses: ./.github/actions/setup-rust-cache
        with:
          toolchain: stable
          cache-key-suffix: security

      - name: Install security tools (cached)
        run: |
          # Install tools only if not already cached
          if ! command -v cargo-audit &> /dev/null; then
            cargo install cargo-audit
          fi
          if ! command -v cargo-deny &> /dev/null; then
            cargo install cargo-deny
          fi

      - name: Run security audit
        run: |
          cargo audit --json > audit-results.json 2>&1 || true
          cargo deny check advisories --format json > deny-results.json 2>&1 || true

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            audit-results.json
            deny-results.json
          retention-days: 30

  # Final status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [quick-check, test-optimized, quality-checks]
    if: always()
    steps:
      - name: Check CI status
        run: |
          # Check if all required jobs passed
          if [ "${{ needs.quick-check.result }}" != "success" ]; then
            echo "::error::Quick check failed"
            exit 1
          fi
          
          if [ "${{ needs.quick-check.outputs.should_run_full_ci }}" = "true" ]; then
            if [ "${{ needs.test-optimized.result }}" != "success" ]; then
              echo "::error::Test suite failed"
              exit 1
            fi
            
            if [ "${{ needs.quality-checks.result }}" != "success" ]; then
              echo "::error::Quality checks failed"
              exit 1
            fi
          fi
          
          echo "::notice::All CI checks passed successfully!"

      - name: Generate CI summary
        run: |
          echo "# CI Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Optimization Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Quick Check**: ${{ needs.quick-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Should Run Full CI**: ${{ needs.quick-check.outputs.should_run_full_ci }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Rust Changed**: ${{ needs.quick-check.outputs.rust_changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docs Changed**: ${{ needs.quick-check.outputs.docs_changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **CI Changed**: ${{ needs.quick-check.outputs.ci_changed }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.quick-check.outputs.should_run_full_ci }}" = "true" ]; then
            echo "## Full CI Results" >> $GITHUB_STEP_SUMMARY
            echo "- **Test Suite**: ${{ needs.test-optimized.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Quality Checks**: ${{ needs.quality-checks.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Coverage**: ${{ needs.coverage-conditional.result || 'Skipped' }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Benchmarks**: ${{ needs.benchmark-conditional.result || 'Skipped' }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Security**: ${{ needs.security-conditional.result || 'Skipped' }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "## Optimization Applied" >> $GITHUB_STEP_SUMMARY
            echo "Full CI was skipped because no Rust code or CI configuration changes were detected." >> $GITHUB_STEP_SUMMARY
            echo "This saves significant CI time and resources." >> $GITHUB_STEP_SUMMARY
          fi