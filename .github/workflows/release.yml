name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Allow manual triggering
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for changelog generation

      - name: Validate and extract version information
        id: version
        run: |
          # Get the tag from either push event or manual input
          if [ "${{ github.event_name }}" = "push" ]; then
            TAG_NAME="${{ github.ref_name }}"
          else
            TAG_NAME="${{ github.event.inputs.tag }}"
          fi
          
          echo "Processing tag: $TAG_NAME"
          
          # Validate tag format (v*.*.*)
          if [[ ! "$TAG_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "::error::Invalid tag format: $TAG_NAME. Expected format: v*.*.* (e.g., v1.0.0)"
            exit 1
          fi
          
          # Extract version without 'v' prefix
          VERSION=${TAG_NAME#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
          
          # Check if this is a prerelease (contains hyphen)
          if [[ "$VERSION" =~ - ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "::notice::This is a prerelease: $VERSION"
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "::notice::This is a stable release: $VERSION"
          fi
          
          echo "::notice::Release validation completed for $TAG_NAME"

      - name: Verify Cargo.toml version matches tag
        run: |
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          TAG_VERSION="${{ steps.version.outputs.version }}"
          
          echo "Cargo.toml version: $CARGO_VERSION"
          echo "Tag version: $TAG_VERSION"
          
          if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
            echo "::error::Version mismatch! Cargo.toml version ($CARGO_VERSION) does not match tag version ($TAG_VERSION)"
            echo "::error::Please update Cargo.toml version to match the release tag"
            exit 1
          fi
          
          echo "::notice::Version verification passed: $TAG_VERSION"

      - name: Check for existing release
        run: |
          TAG_NAME="${{ steps.version.outputs.tag }}"
          
          # Check if release already exists
          if gh release view "$TAG_NAME" >/dev/null 2>&1; then
            echo "::error::Release $TAG_NAME already exists!"
            echo "::error::Please delete the existing release or use a different tag"
            exit 1
          fi
          
          echo "::notice::Release $TAG_NAME does not exist yet - proceeding with creation"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pre-release-tests:
    name: Pre-Release Tests
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-release-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-release-cargo-

      - name: Run comprehensive tests
        run: |
          echo "Running comprehensive test suite for release..."
          
          # Build in release mode
          echo "::group::Building in release mode"
          cargo build --release --all-features --verbose
          echo "::endgroup::"
          
          # Run all tests
          echo "::group::Running all tests"
          cargo test --release --all-features --verbose
          echo "::endgroup::"
          
          # Run documentation tests
          echo "::group::Running documentation tests"
          cargo test --release --doc --all-features --verbose
          echo "::endgroup::"
          
          # Verify documentation builds
          echo "::group::Building documentation"
          cargo doc --release --no-deps --all-features
          echo "::endgroup::"
          
          echo "::notice::All pre-release tests passed successfully"

      - name: Run security audit
        run: |
          echo "Running security audit for release..."
          
          # Install cargo-audit if not already installed
          cargo install cargo-audit
          
          # Run security audit
          if cargo audit; then
            echo "::notice::Security audit passed - no vulnerabilities found"
          else
            echo "::error::Security vulnerabilities detected! Cannot proceed with release"
            exit 1
          fi

      - name: Verify benchmarks work
        run: |
          echo "Verifying benchmarks compile and run..."
          
          # Compile benchmarks to ensure they work
          cargo bench --no-run --all-features
          
          echo "::notice::Benchmarks verification completed"

      - name: Generate release artifacts info
        run: |
          echo "# Pre-Release Validation Report" > pre-release-report.md
          echo "" >> pre-release-report.md
          echo "## Release Information" >> pre-release-report.md
          echo "- **Version**: ${{ needs.validate-release.outputs.version }}" >> pre-release-report.md
          echo "- **Tag**: ${{ needs.validate-release.outputs.tag }}" >> pre-release-report.md
          echo "- **Prerelease**: ${{ needs.validate-release.outputs.is_prerelease }}" >> pre-release-report.md
          echo "- **Validation Time**: $(date)" >> pre-release-report.md
          echo "" >> pre-release-report.md
          echo "## Validation Results" >> pre-release-report.md
          echo "- ✅ Version format validation" >> pre-release-report.md
          echo "- ✅ Cargo.toml version match" >> pre-release-report.md
          echo "- ✅ Release uniqueness check" >> pre-release-report.md
          echo "- ✅ Comprehensive test suite" >> pre-release-report.md
          echo "- ✅ Security audit" >> pre-release-report.md
          echo "- ✅ Benchmark compilation" >> pre-release-report.md
          echo "- ✅ Documentation build" >> pre-release-report.md
          echo "" >> pre-release-report.md
          echo "## Next Steps" >> pre-release-report.md
          echo "1. Multi-platform binary builds" >> pre-release-report.md
          echo "2. Release artifact generation" >> pre-release-report.md
          echo "3. GitHub Release creation" >> pre-release-report.md
          echo "4. Crates.io publication (if stable release)" >> pre-release-report.md

      - name: Upload pre-release validation report
        uses: actions/upload-artifact@v3
        with:
          name: pre-release-validation
          path: pre-release-report.md

  build-release-binaries:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    needs: [validate-release, pre-release-tests]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: libdplyr
            asset_name: libdplyr-linux-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: libdplyr
            asset_name: libdplyr-linux-x86_64-musl
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: libdplyr.exe
            asset_name: libdplyr-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: libdplyr
            asset_name: libdplyr-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: libdplyr
            asset_name: libdplyr-macos-aarch64
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation dependencies (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-release-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-release-cargo-

      - name: Build release binary
        run: |
          echo "Building release binary for ${{ matrix.target }}..."
          cargo build --release --target ${{ matrix.target }} --all-features --verbose
          
          echo "::notice::Successfully built binary for ${{ matrix.target }}"

      - name: Prepare release artifact
        shell: bash
        run: |
          # Create release directory
          mkdir -p release
          
          # Copy binary to release directory with appropriate name
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release/${{ matrix.asset_name }}
          else
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release/${{ matrix.asset_name }}
          fi
          
          # Make binary executable (Unix systems)
          if [ "${{ matrix.os }}" != "windows-latest" ]; then
            chmod +x release/${{ matrix.asset_name }}
          fi
          
          # Generate checksum
          cd release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            certutil -hashfile ${{ matrix.asset_name }} SHA256 > ${{ matrix.asset_name }}.sha256
          else
            sha256sum ${{ matrix.asset_name }} > ${{ matrix.asset_name }}.sha256
          fi
          
          # Display file info
          ls -la
          echo "::notice::Release artifact prepared: ${{ matrix.asset_name }}"

      - name: Upload release artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-${{ matrix.target }}
          path: release/*

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, pre-release-tests, build-release-binaries]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for changelog

      - name: Download all release artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          echo "Preparing release assets..."
          mkdir -p release-assets
          
          # Copy all binary artifacts to release-assets directory
          find artifacts -name "release-*" -type d | while read dir; do
            echo "Processing $dir..."
            cp -r "$dir"/* release-assets/
          done
          
          # List all prepared assets
          echo "Release assets prepared:"
          ls -la release-assets/
          
          # Create a combined checksum file
          cd release-assets
          echo "# SHA256 Checksums for libdplyr ${{ needs.validate-release.outputs.version }}" > SHA256SUMS
          echo "" >> SHA256SUMS
          for file in *.sha256; do
            if [ -f "$file" ]; then
              cat "$file" >> SHA256SUMS
              echo "" >> SHA256SUMS
            fi
          done
          
          echo "::notice::All release assets prepared"

      - name: Generate release notes
        id: release_notes
        run: |
          echo "Generating release notes..."
          
          VERSION="${{ needs.validate-release.outputs.version }}"
          TAG="${{ needs.validate-release.outputs.tag }}"
          IS_PRERELEASE="${{ needs.validate-release.outputs.is_prerelease }}"
          
          # Create release notes
          cat > release-notes.md << EOF
          # libdplyr $VERSION
          
          $(if [ "$IS_PRERELEASE" = "true" ]; then echo "⚠️ **This is a pre-release version**"; echo ""; fi)
          
          ## What's New
          
          This release includes improvements and bug fixes for the libdplyr transpiler.
          
          ## Installation
          
          ### Download Pre-built Binaries
          
          Choose the appropriate binary for your platform:
          
          - **Linux (x86_64)**: \`libdplyr-linux-x86_64\`
          - **Linux (x86_64, musl)**: \`libdplyr-linux-x86_64-musl\`
          - **Windows (x86_64)**: \`libdplyr-windows-x86_64.exe\`
          - **macOS (x86_64)**: \`libdplyr-macos-x86_64\`
          - **macOS (Apple Silicon)**: \`libdplyr-macos-aarch64\`
          
          ### Verify Downloads
          
          All binaries include SHA256 checksums. Verify your download:
          
          \`\`\`bash
          # Linux/macOS
          sha256sum -c libdplyr-*.sha256
          
          # Windows
          certutil -hashfile libdplyr-windows-x86_64.exe SHA256
          \`\`\`
          
          ### From Source
          
          \`\`\`bash
          cargo install --git https://github.com/your-org/libdplyr --tag $TAG
          \`\`\`
          
          ## Usage
          
          \`\`\`bash
          # Convert dplyr code to SQL
          libdplyr --input input.R --output output.sql --dialect postgresql
          
          # See all options
          libdplyr --help
          \`\`\`
          
          ## Full Changelog
          
          For a complete list of changes, see the [commit history](https://github.com/your-org/libdplyr/compare/v$(git describe --tags --abbrev=0 HEAD^)...$TAG).
          
          ## Support
          
          - 📖 [Documentation](https://github.com/your-org/libdplyr#readme)
          - 🐛 [Report Issues](https://github.com/your-org/libdplyr/issues)
          - 💬 [Discussions](https://github.com/your-org/libdplyr/discussions)
          EOF
          
          echo "::notice::Release notes generated"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.tag }}
          name: libdplyr ${{ needs.validate-release.outputs.version }}
          body_path: release-notes.md
          prerelease: ${{ needs.validate-release.outputs.is_prerelease == 'true' }}
          files: |
            release-assets/*
          draft: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release summary
        uses: actions/upload-artifact@v3
        with:
          name: release-summary
          path: |
            release-notes.md
            release-assets/SHA256SUMS

  publish-crates:
    name: Publish to Crates.io
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: needs.validate-release.outputs.is_prerelease == 'false'  # Only publish stable releases
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-publish-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-publish-cargo-

      - name: Verify package before publishing
        run: |
          echo "Verifying package for crates.io publication..."
          
          # Dry run to check package
          cargo publish --dry-run --all-features
          
          echo "::notice::Package verification completed successfully"

      - name: Publish to crates.io
        run: |
          echo "Publishing libdplyr ${{ needs.validate-release.outputs.version }} to crates.io..."
          
          # Publish to crates.io
          cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}
          
          echo "::notice::Successfully published to crates.io"
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: always() && needs.create-release.result == 'success'
    steps:
      - name: Generate release summary
        run: |
          echo "# Release Summary" > release-summary.md
          echo "" >> release-summary.md
          echo "## Release Information" >> release-summary.md
          echo "- **Version**: ${{ needs.validate-release.outputs.version }}" >> release-summary.md
          echo "- **Tag**: ${{ needs.validate-release.outputs.tag }}" >> release-summary.md
          echo "- **Type**: $(if [ "${{ needs.validate-release.outputs.is_prerelease }}" = "true" ]; then echo "Pre-release"; else echo "Stable Release"; fi)" >> release-summary.md
          echo "- **Release Time**: $(date)" >> release-summary.md
          echo "" >> release-summary.md
          echo "## Release Status" >> release-summary.md
          echo "- ✅ Release validation completed" >> release-summary.md
          echo "- ✅ Pre-release tests passed" >> release-summary.md
          echo "- ✅ Multi-platform binaries built" >> release-summary.md
          echo "- ✅ GitHub Release created" >> release-summary.md
          
          if [ "${{ needs.validate-release.outputs.is_prerelease }}" = "false" ]; then
            echo "- ✅ Published to crates.io" >> release-summary.md
          else
            echo "- ⏭️ Crates.io publication skipped (pre-release)" >> release-summary.md
          fi
          
          echo "" >> release-summary.md
          echo "## Next Steps" >> release-summary.md
          echo "1. Monitor release for any issues" >> release-summary.md
          echo "2. Update documentation if needed" >> release-summary.md
          echo "3. Announce release to community" >> release-summary.md
          echo "4. Plan next development cycle" >> release-summary.md
          
          echo "::notice::Release ${{ needs.validate-release.outputs.tag }} completed successfully!"

      - name: Upload final summary
        uses: actions/upload-artifact@v3
        with:
          name: final-release-summary
          path: release-summary.md