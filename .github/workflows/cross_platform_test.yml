name: Cross-Platform Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
        include:
          # Test on multiple Rust versions for Ubuntu
          - os: ubuntu-latest
            rust: beta
          - os: ubuntu-latest
            rust: nightly
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Rust with optimized caching
      uses: ./.github/actions/setup-rust-cache
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt,clippy
        cache-key-suffix: cross-platform-${{ matrix.os }}
    
    - name: Check formatting
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      if: matrix.rust == 'stable'
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Build
      run: cargo build --verbose --all-features
    
    - name: Run unit tests
      run: cargo test --verbose --all-features
    
    - name: Run cross-platform specific tests
      run: cargo test --test cross_platform_tests --verbose
    
    - name: Run integration tests
      run: cargo test --test integration_tests --verbose
    
    - name: Test CLI help command
      run: cargo run -- --help
    
    - name: Test CLI version command
      run: cargo run -- --version
    
    # Platform-specific tests
    - name: Test Unix pipe detection (Unix only)
      if: runner.os != 'Windows'
      run: |
        echo "select(name, age)" | cargo run -- --validate-only
    
    - name: Test Windows pipe detection (Windows only)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        echo "select(name, age)" | cargo run -- --validate-only
    
    - name: Test signal handling (Unix only)
      if: runner.os != 'Windows'
      run: |
        # Test that the program can handle SIGTERM gracefully
        timeout 5s cargo run -- --validate-only < /dev/null || true
    
    - name: Run benchmarks (stable only)
      if: matrix.rust == 'stable'
      run: cargo bench --no-run
    
    - name: Check documentation
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: cargo doc --no-deps --document-private-items --all-features

  # Test with minimal dependencies
  minimal-versions:
    name: Test with minimal dependency versions
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@nightly
    
    - name: Install cargo-minimal-versions
      run: cargo install cargo-minimal-versions
    
    - name: Test with minimal versions
      run: cargo minimal-versions test

  # Test cross-compilation
  cross-compile:
    name: Cross-compile for ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-gnu
          - x86_64-apple-darwin
          - aarch64-unknown-linux-gnu
          - aarch64-apple-darwin
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install cross
      run: cargo install cross
    
    - name: Cross-compile
      run: cross build --target ${{ matrix.target }} --verbose

  # Memory safety tests
  memory-safety:
    name: Memory safety tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: miri
    
    - name: Run Miri
      run: |
        cargo miri setup
        cargo miri test --lib
      env:
        MIRIFLAGS: -Zmiri-strict-provenance

  # Security audit
  security-audit:
    name: Security audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit

  # Coverage report
  coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov
    
    - name: Generate coverage report
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: lcov.info
        fail_ci_if_error: true