name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        cargo install cargo-llvm-cov
    - name: Run tests with coverage
      run: |
        cd libdplyr_c
        cargo llvm-cov --all-features --workspace --lcov --output-path ../lcov.info
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./lcov.info

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
    - name: Run Clippy
      run: |
        cd libdplyr_c
        cargo clippy --all-targets --all-features -- -D warnings

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
    - name: Install cargo-audit
      run: cargo install cargo-audit
    - name: Run security audit
      run: |
        cd libdplyr_c
        cargo audit

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
    - name: Install cargo-deny
      run: cargo install cargo-deny
    - name: Check licenses
      run: |
        cd libdplyr_c
        cargo deny check

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp', 'rust' ]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
