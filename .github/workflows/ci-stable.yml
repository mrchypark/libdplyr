name: Stable CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 1
  CARGO_NET_RETRY: 10

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Rust with optimized caching
        uses: ./.github/actions/setup-rust-cache
        with:
          toolchain: stable
          cache-key-suffix: check

      - name: Run cargo check
        run: cargo check --all-features

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Rust with optimized caching
        uses: ./.github/actions/setup-rust-cache
        with:
          toolchain: ${{ matrix.rust }}
          cache-key-suffix: test-${{ matrix.os }}

      - name: Build project
        run: cargo build --all-features --verbose

      - name: Run unit tests
        run: cargo test --lib --all-features --verbose

      - name: Run integration tests (with retry)
        shell: bash
        run: |
          # Run integration tests with retry logic for flaky tests
          for i in {1..3}; do
            echo "Attempt $i of 3"
            if cargo test --test '*' --all-features --verbose; then
              echo "Integration tests passed on attempt $i"
              exit 0
            else
              echo "Integration tests failed on attempt $i"
              if [ $i -eq 3 ]; then
                echo "All attempts failed"
                exit 1
              fi
              sleep 5
            fi
          done

      - name: Run doc tests
        run: cargo test --doc --all-features --verbose

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Rust with optimized caching
        uses: ./.github/actions/setup-rust-cache
        with:
          toolchain: stable
          components: rustfmt
          cache-key-suffix: fmt

      - name: Run cargo fmt
        run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Rust with optimized caching
        uses: ./.github/actions/setup-rust-cache
        with:
          toolchain: stable
          components: clippy
          cache-key-suffix: clippy

      - name: Run cargo clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Rust with optimized caching
        uses: ./.github/actions/setup-rust-cache
        with:
          toolchain: stable
          cache-key-suffix: docs

      - name: Check documentation
        run: cargo doc --no-deps --document-private-items --all-features
        env:
          RUSTDOCFLAGS: "-D warnings"

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Rust with optimized caching
        uses: ./.github/actions/setup-rust-cache
        with:
          toolchain: stable
          cache-key-suffix: security

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Rust with optimized caching
        uses: ./.github/actions/setup-rust-cache
        with:
          toolchain: stable
          components: llvm-tools-preview
          cache-key-suffix: coverage

      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov

      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          fail_ci_if_error: false

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Rust with optimized caching
        uses: ./.github/actions/setup-rust-cache
        with:
          toolchain: stable
          cache-key-suffix: benchmark

      - name: Run benchmarks
        run: cargo bench --all-features

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [check, test, fmt, clippy, docs, security, coverage, benchmark]
    steps:
      - name: Generate CI summary
        run: |
          echo "# CI Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check job results
          if [ "${{ needs.check.result }}" == "success" ]; then
            echo "✅ **Check**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Check**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.test.result }}" == "success" ]; then
            echo "✅ **Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.fmt.result }}" == "success" ]; then
            echo "✅ **Format**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Format**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.clippy.result }}" == "success" ]; then
            echo "✅ **Clippy**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Clippy**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.docs.result }}" == "success" ]; then
            echo "✅ **Documentation**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Documentation**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security.result }}" == "success" ]; then
            echo "✅ **Security**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Security**: Issues found" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.coverage.result }}" == "success" ]; then
            echo "✅ **Coverage**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Coverage**: Issues found" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.benchmark.result }}" == "success" ]; then
            echo "✅ **Benchmarks**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Benchmarks**: Issues found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY