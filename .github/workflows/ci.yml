name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 1
  CARGO_NET_RETRY: 10

jobs:
  # Quick validation
  check:
    name: Quick Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Rust with caching
        uses: ./.github/actions/setup-rust-cache
        with:
          toolchain: stable
          cache-key-suffix: check

      - name: Run cargo check
        run: cargo check --all-features

  # Test on multiple platforms
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
        include:
          # Test additional Rust versions on Ubuntu only
          - os: ubuntu-latest
            rust: beta
          - os: ubuntu-latest
            rust: nightly
            experimental: true
    continue-on-error: ${{ matrix.experimental == true }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Rust with caching
        uses: ./.github/actions/setup-rust-cache
        with:
          toolchain: ${{ matrix.rust }}
          cache-key-suffix: test-${{ matrix.os }}

      - name: Build
        run: cargo build --all-features --verbose

      - name: Run tests
        run: cargo test --all-features --verbose

      - name: Run doc tests
        run: cargo test --doc --all-features --verbose

  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Rust with caching
        uses: ./.github/actions/setup-rust-cache
        with:
          toolchain: stable
          components: rustfmt,clippy
          cache-key-suffix: quality

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Build documentation
        run: cargo doc --no-deps --document-private-items --all-features
        env:
          RUSTDOCFLAGS: "-D warnings"

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Rust with caching
        uses: ./.github/actions/setup-rust-cache
        with:
          toolchain: stable
          cache-key-suffix: security

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  # Code coverage (only on main/develop)
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Rust with caching
        uses: ./.github/actions/setup-rust-cache
        with:
          toolchain: stable
          components: llvm-tools-preview
          cache-key-suffix: coverage

      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov

      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          fail_ci_if_error: false

  # Performance benchmarks (only on main)
  benchmark:
    name: Benchmarks
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Rust with caching
        uses: ./.github/actions/setup-rust-cache
        with:
          toolchain: stable
          cache-key-suffix: benchmark

      - name: Run benchmarks
        run: cargo bench --all-features

  # Final status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [check, test, quality, security]
    if: always()
    steps:
      - name: Check CI status
        run: |
          if [ "${{ needs.check.result }}" != "success" ]; then
            echo "::error::Check job failed"
            exit 1
          fi
          
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "::error::Test job failed"
            exit 1
          fi
          
          if [ "${{ needs.quality.result }}" != "success" ]; then
            echo "::error::Quality job failed"
            exit 1
          fi
          
          if [ "${{ needs.security.result }}" != "success" ]; then
            echo "::error::Security job failed"
            exit 1
          fi
          
          echo "::notice::All CI checks passed successfully!"